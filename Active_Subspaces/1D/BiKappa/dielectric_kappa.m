function gamma = dielectric_kappa(k, theta1, theta2, mu1, mu2, beta, kappa, init_guess)

if(kappa == 1)

    F = @(omega) 1+(-2).*beta.*(2.*((-1).*k.*mu1+omega).^2+k.^2.*theta1.^2).^(-3).*(4.*(( ...
    -1).*k.*mu1+omega).^4+12.*k.^2.*((-1).*k.*mu1+omega).^2.*theta1.^2+(-3) ...
    .*k.^4.*theta1.^4+(sqrt(-1)*8).*2.^(1/2).*k.^4.*mu1.*(theta1.^2).^(3/2)+ ...
    (sqrt(-1)*(-8)).*2.^(1/2).*k.^3.*omega.*(theta1.^2).^(3/2))+(-2).*((-1)+ ...
    beta).*(2.*((-1).*k.*mu2+omega).^2+k.^2.*theta2.^2).^(-3).*((-4).*((-1) ...
    .*k.*mu2+omega).^4+(-12).*k.^2.*((-1).*k.*mu2+omega).^2.*theta2.^2+3.* ...
    k.^4.*theta2.^4+(sqrt(-1)*(-8)).*2.^(1/2).*k.^4.*mu2.*(theta2.^2).^(3/2) ...
    +(sqrt(-1)*8).*2.^(1/2).*k.^3.*omega.*(theta2.^2).^(3/2));

    options = optimoptions('fsolve','Display','off');
    omega = fsolve(F, init_guess, options);
    gamma = imag(omega); %imaginary component of angular frequency for GSA


elseif(kappa == 2)

    F = @(omega) 1+(-2).*beta.*(2.*((-1).*k.*mu1+omega).^2+3.*k.^2.*theta1.^2).^(-4).*(( ...
    -48).*k.*mu1.*omega.^5+8.*omega.^6+60.*k.^2.*omega.^4.*(2.*mu1.^2+ ...
    theta1.^2)+(-80).*k.^3.*mu1.*omega.^3.*(2.*mu1.^2+3.*theta1.^2)+30.* ...
    k.^4.*omega.^2.*(2.*mu1.^2+3.*theta1.^2).^2+(-12).*k.^5.*omega.*(4.* ...
    mu1.^5+20.*mu1.^3.*theta1.^2+45.*mu1.*theta1.^4+(sqrt(-1)*12).*6.^(1/2) ...
    .*theta1.^4.*(theta1.^2).^(1/2))+k.^6.*(8.*mu1.^6+60.*mu1.^4.*theta1.^2+ ...
    270.*mu1.^2.*theta1.^4+(-135).*theta1.^6+(sqrt(-1)*144).*6.^(1/2).*mu1.* ...
    theta1.^4.*(theta1.^2).^(1/2)))+2.*((-1)+beta).*(2.*((-1).*k.*mu2+omega) ...
    .^2+3.*k.^2.*theta2.^2).^(-4).*((-48).*k.*mu2.*omega.^5+8.*omega.^6+60.* ...
    k.^2.*omega.^4.*(2.*mu2.^2+theta2.^2)+(-80).*k.^3.*mu2.*omega.^3.*(2.* ...
    mu2.^2+3.*theta2.^2)+30.*k.^4.*omega.^2.*(2.*mu2.^2+3.*theta2.^2).^2+( ...
    -12).*k.^5.*omega.*(4.*mu2.^5+20.*mu2.^3.*theta2.^2+45.*mu2.*theta2.^4+( ...
    sqrt(-1)*12).*6.^(1/2).*theta2.^4.*(theta2.^2).^(1/2))+k.^6.*(8.*mu2.^6+ ...
    60.*mu2.^4.*theta2.^2+270.*mu2.^2.*theta2.^4+(-135).*theta2.^6+(sqrt(-1) ...
    *144).*6.^(1/2).*mu2.*theta2.^4.*(theta2.^2).^(1/2)));

    options = optimoptions('fsolve','Display','off');
    omega = fsolve(F, init_guess, options);
    gamma = imag(omega); %imaginary component of angular frequency for GSA

elseif(kappa == 6)

    F = @(omega) 1+(-2/3).*beta.*(2.*((-1).*k.*mu1+omega).^2+11.*k.^2.*theta1.^2).^(-8).* ...
    ((-5376).*k.*mu1.*omega.^13+384.*omega.^14+17472.*k.^2.*omega.^12.*(2.* ...
    mu1.^2+theta1.^2)+(-69888).*k.^3.*mu1.*omega.^11.*(2.*mu1.^2+3.* ...
    theta1.^2)+(-48048).*k.^9.*mu1.*omega.^5.*(2.*mu1.^2+3.*theta1.^2).*(2.* ...
    mu1.^2+11.*theta1.^2).^3+12012.*k.^10.*omega.^4.*(2.*mu1.^2+theta1.^2).* ...
    (2.*mu1.^2+11.*theta1.^2).^4+(-4368).*k.^11.*mu1.*omega.^3.*(2.*mu1.^2+ ...
    11.*theta1.^2).^5+546.*k.^12.*omega.^2.*(2.*mu1.^2+11.*theta1.^2).^6+ ...
    32032.*k.^4.*omega.^10.*(12.*mu1.^4+36.*mu1.^2.*theta1.^2+11.*theta1.^4) ...
    +24024.*k.^8.*omega.^6.*(2.*mu1.^2+11.*theta1.^2).^2.*(12.*mu1.^4+36.* ...
    mu1.^2.*theta1.^2+11.*theta1.^4)+(-64064).*k.^5.*mu1.*omega.^9.*(12.* ...
    mu1.^4+60.*mu1.^2.*theta1.^2+55.*theta1.^4)+(-54912).*k.^7.*mu1.* ...
    omega.^7.*(24.*mu1.^6+252.*mu1.^4.*theta1.^2+770.*mu1.^2.*theta1.^4+ ...
    605.*theta1.^6)+6864.*k.^6.*omega.^8.*(168.*mu1.^6+1260.*mu1.^4.* ...
    theta1.^2+2310.*mu1.^2.*theta1.^4+605.*theta1.^6)+(-4).*k.^13.*omega.*( ...
    1344.*mu1.^13+52416.*mu1.^11.*theta1.^2+880880.*mu1.^9.*theta1.^4+ ...
    8305440.*mu1.^7.*theta1.^6+47963916.*mu1.^5.*theta1.^8+175867692.* ...
    mu1.^3.*theta1.^10+483636153.*mu1.*theta1.^12+(sqrt(-1)*82458112).*22.^( ...
    1/2).*theta1.^12.*(theta1.^2).^(1/2))+k.^14.*(384.*mu1.^14+17472.* ...
    mu1.^12.*theta1.^2+352352.*mu1.^10.*theta1.^4+4152720.*mu1.^8.* ...
    theta1.^6+31975944.*mu1.^6.*theta1.^8+175867692.*mu1.^4.*theta1.^10+ ...
    967272306.*mu1.^2.*theta1.^12+(-759999669).*theta1.^14+(sqrt(-1)* ...
    329832448).*22.^(1/2).*mu1.*theta1.^12.*(theta1.^2).^(1/2)))+(2/3).*(( ...
    -1)+beta).*(2.*((-1).*k.*mu2+omega).^2+11.*k.^2.*theta2.^2).^(-8).*(( ...
    -5376).*k.*mu2.*omega.^13+384.*omega.^14+17472.*k.^2.*omega.^12.*(2.* ...
    mu2.^2+theta2.^2)+(-69888).*k.^3.*mu2.*omega.^11.*(2.*mu2.^2+3.* ...
    theta2.^2)+(-48048).*k.^9.*mu2.*omega.^5.*(2.*mu2.^2+3.*theta2.^2).*(2.* ...
    mu2.^2+11.*theta2.^2).^3+12012.*k.^10.*omega.^4.*(2.*mu2.^2+theta2.^2).* ...
    (2.*mu2.^2+11.*theta2.^2).^4+(-4368).*k.^11.*mu2.*omega.^3.*(2.*mu2.^2+ ...
    11.*theta2.^2).^5+546.*k.^12.*omega.^2.*(2.*mu2.^2+11.*theta2.^2).^6+ ...
    32032.*k.^4.*omega.^10.*(12.*mu2.^4+36.*mu2.^2.*theta2.^2+11.*theta2.^4) ...
    +24024.*k.^8.*omega.^6.*(2.*mu2.^2+11.*theta2.^2).^2.*(12.*mu2.^4+36.* ...
    mu2.^2.*theta2.^2+11.*theta2.^4)+(-64064).*k.^5.*mu2.*omega.^9.*(12.* ...
    mu2.^4+60.*mu2.^2.*theta2.^2+55.*theta2.^4)+(-54912).*k.^7.*mu2.* ...
    omega.^7.*(24.*mu2.^6+252.*mu2.^4.*theta2.^2+770.*mu2.^2.*theta2.^4+ ...
    605.*theta2.^6)+6864.*k.^6.*omega.^8.*(168.*mu2.^6+1260.*mu2.^4.* ...
    theta2.^2+2310.*mu2.^2.*theta2.^4+605.*theta2.^6)+(-4).*k.^13.*omega.*( ...
    1344.*mu2.^13+52416.*mu2.^11.*theta2.^2+880880.*mu2.^9.*theta2.^4+ ...
    8305440.*mu2.^7.*theta2.^6+47963916.*mu2.^5.*theta2.^8+175867692.* ...
    mu2.^3.*theta2.^10+483636153.*mu2.*theta2.^12+(sqrt(-1)*82458112).*22.^( ...
    1/2).*theta2.^12.*(theta2.^2).^(1/2))+k.^14.*(384.*mu2.^14+17472.* ...
    mu2.^12.*theta2.^2+352352.*mu2.^10.*theta2.^4+4152720.*mu2.^8.* ...
    theta2.^6+31975944.*mu2.^6.*theta2.^8+175867692.*mu2.^4.*theta2.^10+ ...
    967272306.*mu2.^2.*theta2.^12+(-759999669).*theta2.^14+(sqrt(-1)* ...
    329832448).*22.^(1/2).*mu2.*theta2.^12.*(theta2.^2).^(1/2)));

    options = optimoptions('fsolve','Display','off');
    omega = fsolve(F, init_guess, options);
    gamma = imag(omega); %imaginary component of angular frequency for GSA

else
    disp('Error: kappa is not equal to 1, 2, or 6');
    gamma = 0;

end
