function omega = dielectricBOT_newkappa2(k, theta1, theta2, mu1, mu2, beta, kappa, init_guess)

    if kappa ~= 2
        pause;
    end

    % =================== options for root finding ========================
    options = optimoptions('fsolve','Display','none');

    % kappa = 2
    D = @(omega) 1+(sqrt(-1)*16).*2.^(1/2).*beta.*((1/4).*(2.^(1/2).*omega+(-1).*k.*(2.^( ...
          1/2).*mu1+(sqrt(-1)*3).*theta1)).*((sqrt(-1)*(-2)).*k.*mu1+(sqrt(-1)*2) ...
          .*omega+2.^(1/2).*k.*theta1).^(-3)+(-2).*k.^3.*(k.*mu1+(-1).*omega).* ...
          theta1.^3.*((-4).*k.*mu1.*omega+2.*omega.^2+k.^2.*(2.*mu1.^2+theta1.^2)) ...
          .^(-3))+(sqrt(-1)*16).*2.^(1/2).*(1+(-1).*beta).*((1/4).*(2.^(1/2).* ...
          omega+(-1).*k.*(2.^(1/2).*mu2+(sqrt(-1)*3).*theta2)).*((sqrt(-1)*(-2)).* ...
          k.*mu2+(sqrt(-1)*2).*omega+2.^(1/2).*k.*theta2).^(-3)+(-2).*k.^3.*(k.* ...
          mu2+(-1).*omega).*theta2.^3.*((-4).*k.*mu2.*omega+2.*omega.^2+k.^2.*(2.* ...
          mu2.^2+theta2.^2)).^(-3));
    omega = fsolve(D, init_guess, options);
end